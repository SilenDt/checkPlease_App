{"ast":null,"code":"import firebase from '@firebase/app-compat';\nimport * as exp from '@firebase/auth/internal';\nimport { Component } from '@firebase/component';\nimport { isBrowserExtension, getUA, isReactNative, isNode, isIndexedDBAvailable, isIE, FirebaseError } from '@firebase/util';\nvar name = \"@firebase/auth-compat\";\nvar version = \"0.3.4\";\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst CORDOVA_ONDEVICEREADY_TIMEOUT_MS = 1000;\nfunction _getCurrentScheme() {\n  var _a;\n  return ((_a = self === null || self === void 0 ? void 0 : self.location) === null || _a === void 0 ? void 0 : _a.protocol) || null;\n}\n/**\r\n * @return {boolean} Whether the current environment is http or https.\r\n */\nfunction _isHttpOrHttps() {\n  return _getCurrentScheme() === 'http:' || _getCurrentScheme() === 'https:';\n}\n/**\r\n * @param {?string=} ua The user agent.\r\n * @return {boolean} Whether the app is rendered in a mobile iOS or Android\r\n *     Cordova environment.\r\n */\nfunction _isAndroidOrIosCordovaScheme() {\n  let ua = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getUA();\n  return !!((_getCurrentScheme() === 'file:' || _getCurrentScheme() === 'ionic:' || _getCurrentScheme() === 'capacitor:') && ua.toLowerCase().match(/iphone|ipad|ipod|android/));\n}\n/**\r\n * @return {boolean} Whether the environment is a native environment, where\r\n *     CORS checks do not apply.\r\n */\nfunction _isNativeEnvironment() {\n  return isReactNative() || isNode();\n}\n/**\r\n * Checks whether the user agent is IE11.\r\n * @return {boolean} True if it is IE11.\r\n */\nfunction _isIe11() {\n  return isIE() && (document === null || document === void 0 ? void 0 : document.documentMode) === 11;\n}\n/**\r\n * Checks whether the user agent is Edge.\r\n * @param {string} userAgent The browser user agent string.\r\n * @return {boolean} True if it is Edge.\r\n */\nfunction _isEdge() {\n  let ua = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getUA();\n  return /Edge\\/\\d+/.test(ua);\n}\n/**\r\n * @param {?string=} opt_userAgent The navigator user agent.\r\n * @return {boolean} Whether local storage is not synchronized between an iframe\r\n *     and a popup of the same domain.\r\n */\nfunction _isLocalStorageNotSynchronized() {\n  let ua = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getUA();\n  return _isIe11() || _isEdge(ua);\n}\n/** @return {boolean} Whether web storage is supported. */\nfunction _isWebStorageSupported() {\n  try {\n    const storage = self.localStorage;\n    const key = exp._generateEventId();\n    if (storage) {\n      // setItem will throw an exception if we cannot access WebStorage (e.g.,\n      // Safari in private mode).\n      storage['setItem'](key, '1');\n      storage['removeItem'](key);\n      // For browsers where iframe web storage does not synchronize with a popup\n      // of the same domain, indexedDB is used for persistent storage. These\n      // browsers include IE11 and Edge.\n      // Make sure it is supported (IE11 and Edge private mode does not support\n      // that).\n      if (_isLocalStorageNotSynchronized()) {\n        // In such browsers, if indexedDB is not supported, an iframe cannot be\n        // notified of the popup sign in result.\n        return isIndexedDBAvailable();\n      }\n      return true;\n    }\n  } catch (e) {\n    // localStorage is not available from a worker. Test availability of\n    // indexedDB.\n    return _isWorker() && isIndexedDBAvailable();\n  }\n  return false;\n}\n/**\r\n * @param {?Object=} global The optional global scope.\r\n * @return {boolean} Whether current environment is a worker.\r\n */\nfunction _isWorker() {\n  // WorkerGlobalScope only defined in worker environment.\n  return typeof global !== 'undefined' && 'WorkerGlobalScope' in global && 'importScripts' in global;\n}\nfunction _isPopupRedirectSupported() {\n  return (_isHttpOrHttps() || isBrowserExtension() || _isAndroidOrIosCordovaScheme()) &&\n  // React Native with remote debugging reports its location.protocol as\n  // http.\n  !_isNativeEnvironment() &&\n  // Local storage has to be supported for browser popup and redirect\n  // operations to work.\n  _isWebStorageSupported() &&\n  // DOM, popups and redirects are not supported within a worker.\n  !_isWorker();\n}\n/** Quick check that indicates the platform *may* be Cordova */\nfunction _isLikelyCordova() {\n  return _isAndroidOrIosCordovaScheme() && typeof document !== 'undefined';\n}\nasync function _isCordova() {\n  if (!_isLikelyCordova()) {\n    return false;\n  }\n  return new Promise(resolve => {\n    const timeoutId = setTimeout(() => {\n      // We've waited long enough; the telltale Cordova event didn't happen\n      resolve(false);\n    }, CORDOVA_ONDEVICEREADY_TIMEOUT_MS);\n    document.addEventListener('deviceready', () => {\n      clearTimeout(timeoutId);\n      resolve(true);\n    });\n  });\n}\nfunction _getSelfWindow() {\n  return typeof window !== 'undefined' ? window : null;\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst Persistence = {\n  LOCAL: 'local',\n  NONE: 'none',\n  SESSION: 'session'\n};\nconst _assert$3 = exp._assert;\nconst PERSISTENCE_KEY = 'persistence';\n/**\r\n * Validates that an argument is a valid persistence value. If an invalid type\r\n * is specified, an error is thrown synchronously.\r\n */\nfunction _validatePersistenceArgument(auth, persistence) {\n  _assert$3(Object.values(Persistence).includes(persistence), auth, \"invalid-persistence-type\" /* exp.AuthErrorCode.INVALID_PERSISTENCE */);\n  // Validate if the specified type is supported in the current environment.\n  if (isReactNative()) {\n    // This is only supported in a browser.\n    _assert$3(persistence !== Persistence.SESSION, auth, \"unsupported-persistence-type\" /* exp.AuthErrorCode.UNSUPPORTED_PERSISTENCE */);\n    return;\n  }\n  if (isNode()) {\n    // Only none is supported in Node.js.\n    _assert$3(persistence === Persistence.NONE, auth, \"unsupported-persistence-type\" /* exp.AuthErrorCode.UNSUPPORTED_PERSISTENCE */);\n    return;\n  }\n  if (_isWorker()) {\n    // In a worker environment, either LOCAL or NONE are supported.\n    // If indexedDB not supported and LOCAL provided, throw an error\n    _assert$3(persistence === Persistence.NONE || persistence === Persistence.LOCAL && isIndexedDBAvailable(), auth, \"unsupported-persistence-type\" /* exp.AuthErrorCode.UNSUPPORTED_PERSISTENCE */);\n    return;\n  }\n  // This is restricted by what the browser supports.\n  _assert$3(persistence === Persistence.NONE || _isWebStorageSupported(), auth, \"unsupported-persistence-type\" /* exp.AuthErrorCode.UNSUPPORTED_PERSISTENCE */);\n}\n\nasync function _savePersistenceForRedirect(auth) {\n  await auth._initializationPromise;\n  const session = getSessionStorageIfAvailable();\n  const key = exp._persistenceKeyName(PERSISTENCE_KEY, auth.config.apiKey, auth.name);\n  if (session) {\n    session.setItem(key, auth._getPersistence());\n  }\n}\nfunction _getPersistencesFromRedirect(apiKey, appName) {\n  const session = getSessionStorageIfAvailable();\n  if (!session) {\n    return [];\n  }\n  const key = exp._persistenceKeyName(PERSISTENCE_KEY, apiKey, appName);\n  const persistence = session.getItem(key);\n  switch (persistence) {\n    case Persistence.NONE:\n      return [exp.inMemoryPersistence];\n    case Persistence.LOCAL:\n      return [exp.indexedDBLocalPersistence, exp.browserSessionPersistence];\n    case Persistence.SESSION:\n      return [exp.browserSessionPersistence];\n    default:\n      return [];\n  }\n}\n/** Returns session storage, or null if the property access errors */\nfunction getSessionStorageIfAvailable() {\n  var _a;\n  try {\n    return ((_a = _getSelfWindow()) === null || _a === void 0 ? void 0 : _a.sessionStorage) || null;\n  } catch (e) {\n    return null;\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst _assert$2 = exp._assert;\n/** Platform-agnostic popup-redirect resolver */\nclass CompatPopupRedirectResolver {\n  constructor() {\n    // Create both resolvers for dynamic resolution later\n    this.browserResolver = exp._getInstance(exp.browserPopupRedirectResolver);\n    this.cordovaResolver = exp._getInstance(exp.cordovaPopupRedirectResolver);\n    // The actual resolver in use: either browserResolver or cordovaResolver.\n    this.underlyingResolver = null;\n    this._redirectPersistence = exp.browserSessionPersistence;\n    this._completeRedirectFn = exp._getRedirectResult;\n    this._overrideRedirectResult = exp._overrideRedirectResult;\n  }\n  async _initialize(auth) {\n    await this.selectUnderlyingResolver();\n    return this.assertedUnderlyingResolver._initialize(auth);\n  }\n  async _openPopup(auth, provider, authType, eventId) {\n    await this.selectUnderlyingResolver();\n    return this.assertedUnderlyingResolver._openPopup(auth, provider, authType, eventId);\n  }\n  async _openRedirect(auth, provider, authType, eventId) {\n    await this.selectUnderlyingResolver();\n    return this.assertedUnderlyingResolver._openRedirect(auth, provider, authType, eventId);\n  }\n  _isIframeWebStorageSupported(auth, cb) {\n    this.assertedUnderlyingResolver._isIframeWebStorageSupported(auth, cb);\n  }\n  _originValidation(auth) {\n    return this.assertedUnderlyingResolver._originValidation(auth);\n  }\n  get _shouldInitProactively() {\n    return _isLikelyCordova() || this.browserResolver._shouldInitProactively;\n  }\n  get assertedUnderlyingResolver() {\n    _assert$2(this.underlyingResolver, \"internal-error\" /* exp.AuthErrorCode.INTERNAL_ERROR */);\n    return this.underlyingResolver;\n  }\n  async selectUnderlyingResolver() {\n    if (this.underlyingResolver) {\n      return;\n    }\n    // We haven't yet determined whether or not we're in Cordova; go ahead\n    // and determine that state now.\n    const isCordova = await _isCordova();\n    this.underlyingResolver = isCordova ? this.cordovaResolver : this.browserResolver;\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction unwrap(object) {\n  return object.unwrap();\n}\nfunction wrapped(object) {\n  return object.wrapped();\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction credentialFromResponse(userCredential) {\n  return credentialFromObject(userCredential);\n}\nfunction attachExtraErrorFields(auth, e) {\n  var _a;\n  // The response contains all fields from the server which may or may not\n  // actually match the underlying type\n  const response = (_a = e.customData) === null || _a === void 0 ? void 0 : _a._tokenResponse;\n  if ((e === null || e === void 0 ? void 0 : e.code) === 'auth/multi-factor-auth-required') {\n    const mfaErr = e;\n    mfaErr.resolver = new MultiFactorResolver(auth, exp.getMultiFactorResolver(auth, e));\n  } else if (response) {\n    const credential = credentialFromObject(e);\n    const credErr = e;\n    if (credential) {\n      credErr.credential = credential;\n      credErr.tenantId = response.tenantId || undefined;\n      credErr.email = response.email || undefined;\n      credErr.phoneNumber = response.phoneNumber || undefined;\n    }\n  }\n}\nfunction credentialFromObject(object) {\n  const {\n    _tokenResponse\n  } = object instanceof FirebaseError ? object.customData : object;\n  if (!_tokenResponse) {\n    return null;\n  }\n  // Handle phone Auth credential responses, as they have a different format\n  // from other backend responses (i.e. no providerId). This is also only the\n  // case for user credentials (does not work for errors).\n  if (!(object instanceof FirebaseError)) {\n    if ('temporaryProof' in _tokenResponse && 'phoneNumber' in _tokenResponse) {\n      return exp.PhoneAuthProvider.credentialFromResult(object);\n    }\n  }\n  const providerId = _tokenResponse.providerId;\n  // Email and password is not supported as there is no situation where the\n  // server would return the password to the client.\n  if (!providerId || providerId === exp.ProviderId.PASSWORD) {\n    return null;\n  }\n  let provider;\n  switch (providerId) {\n    case exp.ProviderId.GOOGLE:\n      provider = exp.GoogleAuthProvider;\n      break;\n    case exp.ProviderId.FACEBOOK:\n      provider = exp.FacebookAuthProvider;\n      break;\n    case exp.ProviderId.GITHUB:\n      provider = exp.GithubAuthProvider;\n      break;\n    case exp.ProviderId.TWITTER:\n      provider = exp.TwitterAuthProvider;\n      break;\n    default:\n      const {\n        oauthIdToken,\n        oauthAccessToken,\n        oauthTokenSecret,\n        pendingToken,\n        nonce\n      } = _tokenResponse;\n      if (!oauthAccessToken && !oauthTokenSecret && !oauthIdToken && !pendingToken) {\n        return null;\n      }\n      // TODO(avolkovi): uncomment this and get it working with SAML & OIDC\n      if (pendingToken) {\n        if (providerId.startsWith('saml.')) {\n          return exp.SAMLAuthCredential._create(providerId, pendingToken);\n        } else {\n          // OIDC and non-default providers excluding Twitter.\n          return exp.OAuthCredential._fromParams({\n            providerId,\n            signInMethod: providerId,\n            pendingToken,\n            idToken: oauthIdToken,\n            accessToken: oauthAccessToken\n          });\n        }\n      }\n      return new exp.OAuthProvider(providerId).credential({\n        idToken: oauthIdToken,\n        accessToken: oauthAccessToken,\n        rawNonce: nonce\n      });\n  }\n  return object instanceof FirebaseError ? provider.credentialFromError(object) : provider.credentialFromResult(object);\n}\nfunction convertCredential(auth, credentialPromise) {\n  return credentialPromise.catch(e => {\n    if (e instanceof FirebaseError) {\n      attachExtraErrorFields(auth, e);\n    }\n    throw e;\n  }).then(credential => {\n    const operationType = credential.operationType;\n    const user = credential.user;\n    return {\n      operationType,\n      credential: credentialFromResponse(credential),\n      additionalUserInfo: exp.getAdditionalUserInfo(credential),\n      user: User.getOrCreate(user)\n    };\n  });\n}\nasync function convertConfirmationResult(auth, confirmationResultPromise) {\n  const confirmationResultExp = await confirmationResultPromise;\n  return {\n    verificationId: confirmationResultExp.verificationId,\n    confirm: verificationCode => convertCredential(auth, confirmationResultExp.confirm(verificationCode))\n  };\n}\nclass MultiFactorResolver {\n  constructor(auth, resolver) {\n    this.resolver = resolver;\n    this.auth = wrapped(auth);\n  }\n  get session() {\n    return this.resolver.session;\n  }\n  get hints() {\n    return this.resolver.hints;\n  }\n  resolveSignIn(assertion) {\n    return convertCredential(unwrap(this.auth), this.resolver.resolveSignIn(assertion));\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nclass User {\n  constructor(_delegate) {\n    this._delegate = _delegate;\n    this.multiFactor = exp.multiFactor(_delegate);\n  }\n  static getOrCreate(user) {\n    if (!User.USER_MAP.has(user)) {\n      User.USER_MAP.set(user, new User(user));\n    }\n    return User.USER_MAP.get(user);\n  }\n  delete() {\n    return this._delegate.delete();\n  }\n  reload() {\n    return this._delegate.reload();\n  }\n  toJSON() {\n    return this._delegate.toJSON();\n  }\n  getIdTokenResult(forceRefresh) {\n    return this._delegate.getIdTokenResult(forceRefresh);\n  }\n  getIdToken(forceRefresh) {\n    return this._delegate.getIdToken(forceRefresh);\n  }\n  linkAndRetrieveDataWithCredential(credential) {\n    return this.linkWithCredential(credential);\n  }\n  async linkWithCredential(credential) {\n    return convertCredential(this.auth, exp.linkWithCredential(this._delegate, credential));\n  }\n  async linkWithPhoneNumber(phoneNumber, applicationVerifier) {\n    return convertConfirmationResult(this.auth, exp.linkWithPhoneNumber(this._delegate, phoneNumber, applicationVerifier));\n  }\n  async linkWithPopup(provider) {\n    return convertCredential(this.auth, exp.linkWithPopup(this._delegate, provider, CompatPopupRedirectResolver));\n  }\n  async linkWithRedirect(provider) {\n    await _savePersistenceForRedirect(exp._castAuth(this.auth));\n    return exp.linkWithRedirect(this._delegate, provider, CompatPopupRedirectResolver);\n  }\n  reauthenticateAndRetrieveDataWithCredential(credential) {\n    return this.reauthenticateWithCredential(credential);\n  }\n  async reauthenticateWithCredential(credential) {\n    return convertCredential(this.auth, exp.reauthenticateWithCredential(this._delegate, credential));\n  }\n  reauthenticateWithPhoneNumber(phoneNumber, applicationVerifier) {\n    return convertConfirmationResult(this.auth, exp.reauthenticateWithPhoneNumber(this._delegate, phoneNumber, applicationVerifier));\n  }\n  reauthenticateWithPopup(provider) {\n    return convertCredential(this.auth, exp.reauthenticateWithPopup(this._delegate, provider, CompatPopupRedirectResolver));\n  }\n  async reauthenticateWithRedirect(provider) {\n    await _savePersistenceForRedirect(exp._castAuth(this.auth));\n    return exp.reauthenticateWithRedirect(this._delegate, provider, CompatPopupRedirectResolver);\n  }\n  sendEmailVerification(actionCodeSettings) {\n    return exp.sendEmailVerification(this._delegate, actionCodeSettings);\n  }\n  async unlink(providerId) {\n    await exp.unlink(this._delegate, providerId);\n    return this;\n  }\n  updateEmail(newEmail) {\n    return exp.updateEmail(this._delegate, newEmail);\n  }\n  updatePassword(newPassword) {\n    return exp.updatePassword(this._delegate, newPassword);\n  }\n  updatePhoneNumber(phoneCredential) {\n    return exp.updatePhoneNumber(this._delegate, phoneCredential);\n  }\n  updateProfile(profile) {\n    return exp.updateProfile(this._delegate, profile);\n  }\n  verifyBeforeUpdateEmail(newEmail, actionCodeSettings) {\n    return exp.verifyBeforeUpdateEmail(this._delegate, newEmail, actionCodeSettings);\n  }\n  get emailVerified() {\n    return this._delegate.emailVerified;\n  }\n  get isAnonymous() {\n    return this._delegate.isAnonymous;\n  }\n  get metadata() {\n    return this._delegate.metadata;\n  }\n  get phoneNumber() {\n    return this._delegate.phoneNumber;\n  }\n  get providerData() {\n    return this._delegate.providerData;\n  }\n  get refreshToken() {\n    return this._delegate.refreshToken;\n  }\n  get tenantId() {\n    return this._delegate.tenantId;\n  }\n  get displayName() {\n    return this._delegate.displayName;\n  }\n  get email() {\n    return this._delegate.email;\n  }\n  get photoURL() {\n    return this._delegate.photoURL;\n  }\n  get providerId() {\n    return this._delegate.providerId;\n  }\n  get uid() {\n    return this._delegate.uid;\n  }\n  get auth() {\n    return this._delegate.auth;\n  }\n}\n// Maintain a map so that there's always a 1:1 mapping between new User and\n// legacy compat users\nUser.USER_MAP = new WeakMap();\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst _assert$1 = exp._assert;\nclass Auth {\n  constructor(app, provider) {\n    this.app = app;\n    if (provider.isInitialized()) {\n      this._delegate = provider.getImmediate();\n      this.linkUnderlyingAuth();\n      return;\n    }\n    const {\n      apiKey\n    } = app.options;\n    // TODO: platform needs to be determined using heuristics\n    _assert$1(apiKey, \"invalid-api-key\" /* exp.AuthErrorCode.INVALID_API_KEY */, {\n      appName: app.name\n    });\n    // TODO: platform needs to be determined using heuristics\n    _assert$1(apiKey, \"invalid-api-key\" /* exp.AuthErrorCode.INVALID_API_KEY */, {\n      appName: app.name\n    });\n    // Only use a popup/redirect resolver in browser environments\n    const resolver = typeof window !== 'undefined' ? CompatPopupRedirectResolver : undefined;\n    this._delegate = provider.initialize({\n      options: {\n        persistence: buildPersistenceHierarchy(apiKey, app.name),\n        popupRedirectResolver: resolver\n      }\n    });\n    this._delegate._updateErrorMap(exp.debugErrorMap);\n    this.linkUnderlyingAuth();\n  }\n  get emulatorConfig() {\n    return this._delegate.emulatorConfig;\n  }\n  get currentUser() {\n    if (!this._delegate.currentUser) {\n      return null;\n    }\n    return User.getOrCreate(this._delegate.currentUser);\n  }\n  get languageCode() {\n    return this._delegate.languageCode;\n  }\n  set languageCode(languageCode) {\n    this._delegate.languageCode = languageCode;\n  }\n  get settings() {\n    return this._delegate.settings;\n  }\n  get tenantId() {\n    return this._delegate.tenantId;\n  }\n  set tenantId(tid) {\n    this._delegate.tenantId = tid;\n  }\n  useDeviceLanguage() {\n    this._delegate.useDeviceLanguage();\n  }\n  signOut() {\n    return this._delegate.signOut();\n  }\n  useEmulator(url, options) {\n    exp.connectAuthEmulator(this._delegate, url, options);\n  }\n  applyActionCode(code) {\n    return exp.applyActionCode(this._delegate, code);\n  }\n  checkActionCode(code) {\n    return exp.checkActionCode(this._delegate, code);\n  }\n  confirmPasswordReset(code, newPassword) {\n    return exp.confirmPasswordReset(this._delegate, code, newPassword);\n  }\n  async createUserWithEmailAndPassword(email, password) {\n    return convertCredential(this._delegate, exp.createUserWithEmailAndPassword(this._delegate, email, password));\n  }\n  fetchProvidersForEmail(email) {\n    return this.fetchSignInMethodsForEmail(email);\n  }\n  fetchSignInMethodsForEmail(email) {\n    return exp.fetchSignInMethodsForEmail(this._delegate, email);\n  }\n  isSignInWithEmailLink(emailLink) {\n    return exp.isSignInWithEmailLink(this._delegate, emailLink);\n  }\n  async getRedirectResult() {\n    _assert$1(_isPopupRedirectSupported(), this._delegate, \"operation-not-supported-in-this-environment\" /* exp.AuthErrorCode.OPERATION_NOT_SUPPORTED */);\n    const credential = await exp.getRedirectResult(this._delegate, CompatPopupRedirectResolver);\n    if (!credential) {\n      return {\n        credential: null,\n        user: null\n      };\n    }\n    return convertCredential(this._delegate, Promise.resolve(credential));\n  }\n  // This function should only be called by frameworks (e.g. FirebaseUI-web) to log their usage.\n  // It is not intended for direct use by developer apps. NO jsdoc here to intentionally leave it\n  // out of autogenerated documentation pages to reduce accidental misuse.\n  addFrameworkForLogging(framework) {\n    exp.addFrameworkForLogging(this._delegate, framework);\n  }\n  onAuthStateChanged(nextOrObserver, errorFn, completed) {\n    const {\n      next,\n      error,\n      complete\n    } = wrapObservers(nextOrObserver, errorFn, completed);\n    return this._delegate.onAuthStateChanged(next, error, complete);\n  }\n  onIdTokenChanged(nextOrObserver, errorFn, completed) {\n    const {\n      next,\n      error,\n      complete\n    } = wrapObservers(nextOrObserver, errorFn, completed);\n    return this._delegate.onIdTokenChanged(next, error, complete);\n  }\n  sendSignInLinkToEmail(email, actionCodeSettings) {\n    return exp.sendSignInLinkToEmail(this._delegate, email, actionCodeSettings);\n  }\n  sendPasswordResetEmail(email, actionCodeSettings) {\n    return exp.sendPasswordResetEmail(this._delegate, email, actionCodeSettings || undefined);\n  }\n  async setPersistence(persistence) {\n    _validatePersistenceArgument(this._delegate, persistence);\n    let converted;\n    switch (persistence) {\n      case Persistence.SESSION:\n        converted = exp.browserSessionPersistence;\n        break;\n      case Persistence.LOCAL:\n        // Not using isIndexedDBAvailable() since it only checks if indexedDB is defined.\n        const isIndexedDBFullySupported = await exp._getInstance(exp.indexedDBLocalPersistence)._isAvailable();\n        converted = isIndexedDBFullySupported ? exp.indexedDBLocalPersistence : exp.browserLocalPersistence;\n        break;\n      case Persistence.NONE:\n        converted = exp.inMemoryPersistence;\n        break;\n      default:\n        return exp._fail(\"argument-error\" /* exp.AuthErrorCode.ARGUMENT_ERROR */, {\n          appName: this._delegate.name\n        });\n    }\n    return this._delegate.setPersistence(converted);\n  }\n  signInAndRetrieveDataWithCredential(credential) {\n    return this.signInWithCredential(credential);\n  }\n  signInAnonymously() {\n    return convertCredential(this._delegate, exp.signInAnonymously(this._delegate));\n  }\n  signInWithCredential(credential) {\n    return convertCredential(this._delegate, exp.signInWithCredential(this._delegate, credential));\n  }\n  signInWithCustomToken(token) {\n    return convertCredential(this._delegate, exp.signInWithCustomToken(this._delegate, token));\n  }\n  signInWithEmailAndPassword(email, password) {\n    return convertCredential(this._delegate, exp.signInWithEmailAndPassword(this._delegate, email, password));\n  }\n  signInWithEmailLink(email, emailLink) {\n    return convertCredential(this._delegate, exp.signInWithEmailLink(this._delegate, email, emailLink));\n  }\n  signInWithPhoneNumber(phoneNumber, applicationVerifier) {\n    return convertConfirmationResult(this._delegate, exp.signInWithPhoneNumber(this._delegate, phoneNumber, applicationVerifier));\n  }\n  async signInWithPopup(provider) {\n    _assert$1(_isPopupRedirectSupported(), this._delegate, \"operation-not-supported-in-this-environment\" /* exp.AuthErrorCode.OPERATION_NOT_SUPPORTED */);\n    return convertCredential(this._delegate, exp.signInWithPopup(this._delegate, provider, CompatPopupRedirectResolver));\n  }\n  async signInWithRedirect(provider) {\n    _assert$1(_isPopupRedirectSupported(), this._delegate, \"operation-not-supported-in-this-environment\" /* exp.AuthErrorCode.OPERATION_NOT_SUPPORTED */);\n    await _savePersistenceForRedirect(this._delegate);\n    return exp.signInWithRedirect(this._delegate, provider, CompatPopupRedirectResolver);\n  }\n  updateCurrentUser(user) {\n    // remove ts-ignore once overloads are defined for exp functions to accept compat objects\n    // @ts-ignore\n    return this._delegate.updateCurrentUser(user);\n  }\n  verifyPasswordResetCode(code) {\n    return exp.verifyPasswordResetCode(this._delegate, code);\n  }\n  unwrap() {\n    return this._delegate;\n  }\n  _delete() {\n    return this._delegate._delete();\n  }\n  linkUnderlyingAuth() {\n    this._delegate.wrapped = () => this;\n  }\n}\nAuth.Persistence = Persistence;\nfunction wrapObservers(nextOrObserver, error, complete) {\n  let next = nextOrObserver;\n  if (typeof nextOrObserver !== 'function') {\n    ({\n      next,\n      error,\n      complete\n    } = nextOrObserver);\n  }\n  // We know 'next' is now a function\n  const oldNext = next;\n  const newNext = user => oldNext(user && User.getOrCreate(user));\n  return {\n    next: newNext,\n    error: error,\n    complete\n  };\n}\nfunction buildPersistenceHierarchy(apiKey, appName) {\n  // Note this is slightly different behavior: in this case, the stored\n  // persistence is checked *first* rather than last. This is because we want\n  // to prefer stored persistence type in the hierarchy. This is an empty\n  // array if window is not available or there is no pending redirect\n  const persistences = _getPersistencesFromRedirect(apiKey, appName);\n  // If \"self\" is available, add indexedDB\n  if (typeof self !== 'undefined' && !persistences.includes(exp.indexedDBLocalPersistence)) {\n    persistences.push(exp.indexedDBLocalPersistence);\n  }\n  // If \"window\" is available, add HTML Storage persistences\n  if (typeof window !== 'undefined') {\n    for (const persistence of [exp.browserLocalPersistence, exp.browserSessionPersistence]) {\n      if (!persistences.includes(persistence)) {\n        persistences.push(persistence);\n      }\n    }\n  }\n  // Add in-memory as a final fallback\n  if (!persistences.includes(exp.inMemoryPersistence)) {\n    persistences.push(exp.inMemoryPersistence);\n  }\n  return persistences;\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nclass PhoneAuthProvider {\n  constructor() {\n    this.providerId = 'phone';\n    // TODO: remove ts-ignore when moving types from auth-types to auth-compat\n    // @ts-ignore\n    this._delegate = new exp.PhoneAuthProvider(unwrap(firebase.auth()));\n  }\n  static credential(verificationId, verificationCode) {\n    return exp.PhoneAuthProvider.credential(verificationId, verificationCode);\n  }\n  verifyPhoneNumber(phoneInfoOptions, applicationVerifier) {\n    return this._delegate.verifyPhoneNumber(\n    // The implementation matches but the types are subtly incompatible\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    phoneInfoOptions, applicationVerifier);\n  }\n  unwrap() {\n    return this._delegate;\n  }\n}\nPhoneAuthProvider.PHONE_SIGN_IN_METHOD = exp.PhoneAuthProvider.PHONE_SIGN_IN_METHOD;\nPhoneAuthProvider.PROVIDER_ID = exp.PhoneAuthProvider.PROVIDER_ID;\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst _assert = exp._assert;\nclass RecaptchaVerifier {\n  constructor(container, parameters) {\n    let app = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : firebase.app();\n    var _a;\n    // API key is required for web client RPC calls.\n    _assert((_a = app.options) === null || _a === void 0 ? void 0 : _a.apiKey, \"invalid-api-key\" /* exp.AuthErrorCode.INVALID_API_KEY */, {\n      appName: app.name\n    });\n    this._delegate = new exp.RecaptchaVerifier(container,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    parameters,\n    // TODO: remove ts-ignore when moving types from auth-types to auth-compat\n    // @ts-ignore\n    app.auth());\n    this.type = this._delegate.type;\n  }\n  clear() {\n    this._delegate.clear();\n  }\n  render() {\n    return this._delegate.render();\n  }\n  verify() {\n    return this._delegate.verify();\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst AUTH_TYPE = 'auth-compat';\n// Create auth components to register with firebase.\n// Provides Auth public APIs.\nfunction registerAuthCompat(instance) {\n  instance.INTERNAL.registerComponent(new Component(AUTH_TYPE, container => {\n    // getImmediate for FirebaseApp will always succeed\n    const app = container.getProvider('app-compat').getImmediate();\n    const authProvider = container.getProvider('auth');\n    return new Auth(app, authProvider);\n  }, \"PUBLIC\" /* ComponentType.PUBLIC */).setServiceProps({\n    ActionCodeInfo: {\n      Operation: {\n        EMAIL_SIGNIN: exp.ActionCodeOperation.EMAIL_SIGNIN,\n        PASSWORD_RESET: exp.ActionCodeOperation.PASSWORD_RESET,\n        RECOVER_EMAIL: exp.ActionCodeOperation.RECOVER_EMAIL,\n        REVERT_SECOND_FACTOR_ADDITION: exp.ActionCodeOperation.REVERT_SECOND_FACTOR_ADDITION,\n        VERIFY_AND_CHANGE_EMAIL: exp.ActionCodeOperation.VERIFY_AND_CHANGE_EMAIL,\n        VERIFY_EMAIL: exp.ActionCodeOperation.VERIFY_EMAIL\n      }\n    },\n    EmailAuthProvider: exp.EmailAuthProvider,\n    FacebookAuthProvider: exp.FacebookAuthProvider,\n    GithubAuthProvider: exp.GithubAuthProvider,\n    GoogleAuthProvider: exp.GoogleAuthProvider,\n    OAuthProvider: exp.OAuthProvider,\n    SAMLAuthProvider: exp.SAMLAuthProvider,\n    PhoneAuthProvider: PhoneAuthProvider,\n    PhoneMultiFactorGenerator: exp.PhoneMultiFactorGenerator,\n    RecaptchaVerifier: RecaptchaVerifier,\n    TwitterAuthProvider: exp.TwitterAuthProvider,\n    Auth,\n    AuthCredential: exp.AuthCredential,\n    Error: FirebaseError\n  }).setInstantiationMode(\"LAZY\" /* InstantiationMode.LAZY */).setMultipleInstances(false));\n  instance.registerVersion(name, version);\n}\nregisterAuthCompat(firebase);","map":{"version":3,"names":["CORDOVA_ONDEVICEREADY_TIMEOUT_MS","_getCurrentScheme","_a","self","location","protocol","_isHttpOrHttps","_isAndroidOrIosCordovaScheme","ua","arguments","length","undefined","getUA","toLowerCase","match","_isNativeEnvironment","isReactNative","isNode","_isIe11","isIE","document","documentMode","_isEdge","test","_isLocalStorageNotSynchronized","_isWebStorageSupported","storage","localStorage","key","exp","_generateEventId","isIndexedDBAvailable","e","_isWorker","global","_isPopupRedirectSupported","isBrowserExtension","_isLikelyCordova","_isCordova","Promise","resolve","timeoutId","setTimeout","addEventListener","clearTimeout","_getSelfWindow","window","Persistence","LOCAL","NONE","SESSION","_assert$3","_assert","PERSISTENCE_KEY","_validatePersistenceArgument","auth","persistence","Object","values","includes","_savePersistenceForRedirect","_initializationPromise","session","getSessionStorageIfAvailable","_persistenceKeyName","config","apiKey","name","setItem","_getPersistence","_getPersistencesFromRedirect","appName","getItem","inMemoryPersistence","indexedDBLocalPersistence","browserSessionPersistence","sessionStorage","_assert$2","CompatPopupRedirectResolver","constructor","browserResolver","_getInstance","browserPopupRedirectResolver","cordovaResolver","cordovaPopupRedirectResolver","underlyingResolver","_redirectPersistence","_completeRedirectFn","_getRedirectResult","_overrideRedirectResult","_initialize","selectUnderlyingResolver","assertedUnderlyingResolver","_openPopup","provider","authType","eventId","_openRedirect","_isIframeWebStorageSupported","cb","_originValidation","_shouldInitProactively","isCordova","unwrap","object","wrapped","credentialFromResponse","userCredential","credentialFromObject","attachExtraErrorFields","response","customData","_tokenResponse","code","mfaErr","resolver","MultiFactorResolver","getMultiFactorResolver","credential","credErr","tenantId","email","phoneNumber","FirebaseError","PhoneAuthProvider","credentialFromResult","providerId","ProviderId","PASSWORD","GOOGLE","GoogleAuthProvider","FACEBOOK","FacebookAuthProvider","GITHUB","GithubAuthProvider","TWITTER","TwitterAuthProvider","oauthIdToken","oauthAccessToken","oauthTokenSecret","pendingToken","nonce","startsWith","SAMLAuthCredential","_create","OAuthCredential","_fromParams","signInMethod","idToken","accessToken","OAuthProvider","rawNonce","credentialFromError","convertCredential","credentialPromise","catch","then","operationType","user","additionalUserInfo","getAdditionalUserInfo","User","getOrCreate","convertConfirmationResult","confirmationResultPromise","confirmationResultExp","verificationId","confirm","verificationCode","hints","resolveSignIn","assertion","_delegate","multiFactor","USER_MAP","has","set","get","delete","reload","toJSON","getIdTokenResult","forceRefresh","getIdToken","linkAndRetrieveDataWithCredential","linkWithCredential","linkWithPhoneNumber","applicationVerifier","linkWithPopup","linkWithRedirect","_castAuth","reauthenticateAndRetrieveDataWithCredential","reauthenticateWithCredential","reauthenticateWithPhoneNumber","reauthenticateWithPopup","reauthenticateWithRedirect","sendEmailVerification","actionCodeSettings","unlink","updateEmail","newEmail","updatePassword","newPassword","updatePhoneNumber","phoneCredential","updateProfile","profile","verifyBeforeUpdateEmail","emailVerified","isAnonymous","metadata","providerData","refreshToken","displayName","photoURL","uid","WeakMap","_assert$1","Auth","app","isInitialized","getImmediate","linkUnderlyingAuth","options","initialize","buildPersistenceHierarchy","popupRedirectResolver","_updateErrorMap","debugErrorMap","emulatorConfig","currentUser","languageCode","settings","tid","useDeviceLanguage","signOut","useEmulator","url","connectAuthEmulator","applyActionCode","checkActionCode","confirmPasswordReset","createUserWithEmailAndPassword","password","fetchProvidersForEmail","fetchSignInMethodsForEmail","isSignInWithEmailLink","emailLink","getRedirectResult","addFrameworkForLogging","framework","onAuthStateChanged","nextOrObserver","errorFn","completed","next","error","complete","wrapObservers","onIdTokenChanged","sendSignInLinkToEmail","sendPasswordResetEmail","setPersistence","converted","isIndexedDBFullySupported","_isAvailable","browserLocalPersistence","_fail","signInAndRetrieveDataWithCredential","signInWithCredential","signInAnonymously","signInWithCustomToken","token","signInWithEmailAndPassword","signInWithEmailLink","signInWithPhoneNumber","signInWithPopup","signInWithRedirect","updateCurrentUser","verifyPasswordResetCode","_delete","oldNext","newNext","persistences","push","firebase","verifyPhoneNumber","phoneInfoOptions","PHONE_SIGN_IN_METHOD","PROVIDER_ID","RecaptchaVerifier","container","parameters","type","clear","render","verify","AUTH_TYPE","registerAuthCompat","instance","INTERNAL","registerComponent","Component","getProvider","authProvider","setServiceProps","ActionCodeInfo","Operation","EMAIL_SIGNIN","ActionCodeOperation","PASSWORD_RESET","RECOVER_EMAIL","REVERT_SECOND_FACTOR_ADDITION","VERIFY_AND_CHANGE_EMAIL","VERIFY_EMAIL","EmailAuthProvider","SAMLAuthProvider","PhoneMultiFactorGenerator","AuthCredential","Error","setInstantiationMode","setMultipleInstances","registerVersion","version"],"sources":["/Users/victoriadorosenco/codeclan_work/CapstoneProject/checkPlease/checkPlease_App/node_modules/@firebase/auth-compat/src/platform.ts","/Users/victoriadorosenco/codeclan_work/CapstoneProject/checkPlease/checkPlease_App/node_modules/@firebase/auth-compat/src/persistence.ts","/Users/victoriadorosenco/codeclan_work/CapstoneProject/checkPlease/checkPlease_App/node_modules/@firebase/auth-compat/src/popup_redirect.ts","/Users/victoriadorosenco/codeclan_work/CapstoneProject/checkPlease/checkPlease_App/node_modules/@firebase/auth-compat/src/wrap.ts","/Users/victoriadorosenco/codeclan_work/CapstoneProject/checkPlease/checkPlease_App/node_modules/@firebase/auth-compat/src/user_credential.ts","/Users/victoriadorosenco/codeclan_work/CapstoneProject/checkPlease/checkPlease_App/node_modules/@firebase/auth-compat/src/user.ts","/Users/victoriadorosenco/codeclan_work/CapstoneProject/checkPlease/checkPlease_App/node_modules/@firebase/auth-compat/src/auth.ts","/Users/victoriadorosenco/codeclan_work/CapstoneProject/checkPlease/checkPlease_App/node_modules/@firebase/auth-compat/src/phone_auth_provider.ts","/Users/victoriadorosenco/codeclan_work/CapstoneProject/checkPlease/checkPlease_App/node_modules/@firebase/auth-compat/src/recaptcha_verifier.ts","/Users/victoriadorosenco/codeclan_work/CapstoneProject/checkPlease/checkPlease_App/node_modules/@firebase/auth-compat/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as impl from '@firebase/auth/internal';\nimport {\n  getUA,\n  isBrowserExtension,\n  isReactNative,\n  isNode,\n  isIE,\n  isIndexedDBAvailable\n} from '@firebase/util';\n\ndeclare global {\n  interface Document {\n    documentMode?: number;\n  }\n}\n\nconst CORDOVA_ONDEVICEREADY_TIMEOUT_MS = 1000;\n\nfunction _getCurrentScheme(): string | null {\n  return self?.location?.protocol || null;\n}\n\n/**\n * @return {boolean} Whether the current environment is http or https.\n */\nfunction _isHttpOrHttps(): boolean {\n  return _getCurrentScheme() === 'http:' || _getCurrentScheme() === 'https:';\n}\n\n/**\n * @param {?string=} ua The user agent.\n * @return {boolean} Whether the app is rendered in a mobile iOS or Android\n *     Cordova environment.\n */\nexport function _isAndroidOrIosCordovaScheme(ua: string = getUA()): boolean {\n  return !!(\n    (_getCurrentScheme() === 'file:' ||\n      _getCurrentScheme() === 'ionic:' ||\n      _getCurrentScheme() === 'capacitor:') &&\n    ua.toLowerCase().match(/iphone|ipad|ipod|android/)\n  );\n}\n\n/**\n * @return {boolean} Whether the environment is a native environment, where\n *     CORS checks do not apply.\n */\nfunction _isNativeEnvironment(): boolean {\n  return isReactNative() || isNode();\n}\n\n/**\n * Checks whether the user agent is IE11.\n * @return {boolean} True if it is IE11.\n */\nfunction _isIe11(): boolean {\n  return isIE() && document?.documentMode === 11;\n}\n\n/**\n * Checks whether the user agent is Edge.\n * @param {string} userAgent The browser user agent string.\n * @return {boolean} True if it is Edge.\n */\nfunction _isEdge(ua: string = getUA()): boolean {\n  return /Edge\\/\\d+/.test(ua);\n}\n\n/**\n * @param {?string=} opt_userAgent The navigator user agent.\n * @return {boolean} Whether local storage is not synchronized between an iframe\n *     and a popup of the same domain.\n */\nfunction _isLocalStorageNotSynchronized(ua: string = getUA()): boolean {\n  return _isIe11() || _isEdge(ua);\n}\n\n/** @return {boolean} Whether web storage is supported. */\nexport function _isWebStorageSupported(): boolean {\n  try {\n    const storage = self.localStorage;\n    const key = impl._generateEventId();\n    if (storage) {\n      // setItem will throw an exception if we cannot access WebStorage (e.g.,\n      // Safari in private mode).\n      storage['setItem'](key, '1');\n      storage['removeItem'](key);\n      // For browsers where iframe web storage does not synchronize with a popup\n      // of the same domain, indexedDB is used for persistent storage. These\n      // browsers include IE11 and Edge.\n      // Make sure it is supported (IE11 and Edge private mode does not support\n      // that).\n      if (_isLocalStorageNotSynchronized()) {\n        // In such browsers, if indexedDB is not supported, an iframe cannot be\n        // notified of the popup sign in result.\n        return isIndexedDBAvailable();\n      }\n      return true;\n    }\n  } catch (e) {\n    // localStorage is not available from a worker. Test availability of\n    // indexedDB.\n    return _isWorker() && isIndexedDBAvailable();\n  }\n  return false;\n}\n\n/**\n * @param {?Object=} global The optional global scope.\n * @return {boolean} Whether current environment is a worker.\n */\nexport function _isWorker(): boolean {\n  // WorkerGlobalScope only defined in worker environment.\n  return (\n    typeof global !== 'undefined' &&\n    'WorkerGlobalScope' in global &&\n    'importScripts' in global\n  );\n}\n\nexport function _isPopupRedirectSupported(): boolean {\n  return (\n    (_isHttpOrHttps() ||\n      isBrowserExtension() ||\n      _isAndroidOrIosCordovaScheme()) &&\n    // React Native with remote debugging reports its location.protocol as\n    // http.\n    !_isNativeEnvironment() &&\n    // Local storage has to be supported for browser popup and redirect\n    // operations to work.\n    _isWebStorageSupported() &&\n    // DOM, popups and redirects are not supported within a worker.\n    !_isWorker()\n  );\n}\n\n/** Quick check that indicates the platform *may* be Cordova */\nexport function _isLikelyCordova(): boolean {\n  return _isAndroidOrIosCordovaScheme() && typeof document !== 'undefined';\n}\n\nexport async function _isCordova(): Promise<boolean> {\n  if (!_isLikelyCordova()) {\n    return false;\n  }\n\n  return new Promise(resolve => {\n    const timeoutId = setTimeout(() => {\n      // We've waited long enough; the telltale Cordova event didn't happen\n      resolve(false);\n    }, CORDOVA_ONDEVICEREADY_TIMEOUT_MS);\n\n    document.addEventListener('deviceready', () => {\n      clearTimeout(timeoutId);\n      resolve(true);\n    });\n  });\n}\n\nexport function _getSelfWindow(): Window | null {\n  return typeof window !== 'undefined' ? window : null;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as exp from '@firebase/auth/internal';\nimport { isIndexedDBAvailable, isNode, isReactNative } from '@firebase/util';\nimport { _getSelfWindow, _isWebStorageSupported, _isWorker } from './platform';\n\nexport const Persistence = {\n  LOCAL: 'local',\n  NONE: 'none',\n  SESSION: 'session'\n};\n\nconst _assert: typeof exp._assert = exp._assert;\n\nconst PERSISTENCE_KEY = 'persistence';\n\n/**\n * Validates that an argument is a valid persistence value. If an invalid type\n * is specified, an error is thrown synchronously.\n */\nexport function _validatePersistenceArgument(\n  auth: exp.Auth,\n  persistence: string\n): void {\n  _assert(\n    Object.values(Persistence).includes(persistence),\n    auth,\n    exp.AuthErrorCode.INVALID_PERSISTENCE\n  );\n  // Validate if the specified type is supported in the current environment.\n  if (isReactNative()) {\n    // This is only supported in a browser.\n    _assert(\n      persistence !== Persistence.SESSION,\n      auth,\n      exp.AuthErrorCode.UNSUPPORTED_PERSISTENCE\n    );\n    return;\n  }\n  if (isNode()) {\n    // Only none is supported in Node.js.\n    _assert(\n      persistence === Persistence.NONE,\n      auth,\n      exp.AuthErrorCode.UNSUPPORTED_PERSISTENCE\n    );\n    return;\n  }\n  if (_isWorker()) {\n    // In a worker environment, either LOCAL or NONE are supported.\n    // If indexedDB not supported and LOCAL provided, throw an error\n    _assert(\n      persistence === Persistence.NONE ||\n        (persistence === Persistence.LOCAL && isIndexedDBAvailable()),\n      auth,\n      exp.AuthErrorCode.UNSUPPORTED_PERSISTENCE\n    );\n    return;\n  }\n  // This is restricted by what the browser supports.\n  _assert(\n    persistence === Persistence.NONE || _isWebStorageSupported(),\n    auth,\n    exp.AuthErrorCode.UNSUPPORTED_PERSISTENCE\n  );\n}\n\nexport async function _savePersistenceForRedirect(\n  auth: exp.AuthInternal\n): Promise<void> {\n  await auth._initializationPromise;\n  const session = getSessionStorageIfAvailable();\n  const key = exp._persistenceKeyName(\n    PERSISTENCE_KEY,\n    auth.config.apiKey,\n    auth.name\n  );\n  if (session) {\n    session.setItem(key, auth._getPersistence());\n  }\n}\n\nexport function _getPersistencesFromRedirect(\n  apiKey: string,\n  appName: string\n): exp.Persistence[] {\n  const session = getSessionStorageIfAvailable();\n  if (!session) {\n    return [];\n  }\n\n  const key = exp._persistenceKeyName(PERSISTENCE_KEY, apiKey, appName);\n  const persistence = session.getItem(key);\n\n  switch (persistence) {\n    case Persistence.NONE:\n      return [exp.inMemoryPersistence];\n    case Persistence.LOCAL:\n      return [exp.indexedDBLocalPersistence, exp.browserSessionPersistence];\n    case Persistence.SESSION:\n      return [exp.browserSessionPersistence];\n    default:\n      return [];\n  }\n}\n\n/** Returns session storage, or null if the property access errors */\nfunction getSessionStorageIfAvailable(): Storage | null {\n  try {\n    return _getSelfWindow()?.sessionStorage || null;\n  } catch (e) {\n    return null;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as exp from '@firebase/auth/internal';\nimport { _isCordova, _isLikelyCordova } from './platform';\n\nconst _assert: typeof exp._assert = exp._assert;\n\n/** Platform-agnostic popup-redirect resolver */\nexport class CompatPopupRedirectResolver\n  implements exp.PopupRedirectResolverInternal\n{\n  // Create both resolvers for dynamic resolution later\n  private readonly browserResolver: exp.PopupRedirectResolverInternal =\n    exp._getInstance(exp.browserPopupRedirectResolver);\n  private readonly cordovaResolver: exp.PopupRedirectResolverInternal =\n    exp._getInstance(exp.cordovaPopupRedirectResolver);\n  // The actual resolver in use: either browserResolver or cordovaResolver.\n  private underlyingResolver: exp.PopupRedirectResolverInternal | null = null;\n  _redirectPersistence = exp.browserSessionPersistence;\n\n  _completeRedirectFn: (\n    auth: exp.Auth,\n    resolver: exp.PopupRedirectResolver,\n    bypassAuthState: boolean\n  ) => Promise<exp.UserCredential | null> = exp._getRedirectResult;\n  _overrideRedirectResult = exp._overrideRedirectResult;\n\n  async _initialize(auth: exp.AuthImpl): Promise<exp.EventManager> {\n    await this.selectUnderlyingResolver();\n    return this.assertedUnderlyingResolver._initialize(auth);\n  }\n\n  async _openPopup(\n    auth: exp.AuthImpl,\n    provider: exp.AuthProvider,\n    authType: exp.AuthEventType,\n    eventId?: string\n  ): Promise<exp.AuthPopup> {\n    await this.selectUnderlyingResolver();\n    return this.assertedUnderlyingResolver._openPopup(\n      auth,\n      provider,\n      authType,\n      eventId\n    );\n  }\n\n  async _openRedirect(\n    auth: exp.AuthImpl,\n    provider: exp.AuthProvider,\n    authType: exp.AuthEventType,\n    eventId?: string\n  ): Promise<void> {\n    await this.selectUnderlyingResolver();\n    return this.assertedUnderlyingResolver._openRedirect(\n      auth,\n      provider,\n      authType,\n      eventId\n    );\n  }\n\n  _isIframeWebStorageSupported(\n    auth: exp.AuthImpl,\n    cb: (support: boolean) => unknown\n  ): void {\n    this.assertedUnderlyingResolver._isIframeWebStorageSupported(auth, cb);\n  }\n\n  _originValidation(auth: exp.Auth): Promise<void> {\n    return this.assertedUnderlyingResolver._originValidation(auth);\n  }\n\n  get _shouldInitProactively(): boolean {\n    return _isLikelyCordova() || this.browserResolver._shouldInitProactively;\n  }\n\n  private get assertedUnderlyingResolver(): exp.PopupRedirectResolverInternal {\n    _assert(this.underlyingResolver, exp.AuthErrorCode.INTERNAL_ERROR);\n    return this.underlyingResolver;\n  }\n\n  private async selectUnderlyingResolver(): Promise<void> {\n    if (this.underlyingResolver) {\n      return;\n    }\n\n    // We haven't yet determined whether or not we're in Cordova; go ahead\n    // and determine that state now.\n    const isCordova = await _isCordova();\n    this.underlyingResolver = isCordova\n      ? this.cordovaResolver\n      : this.browserResolver;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** Forward direction wrapper from Compat --unwrap-> Exp */\nexport interface Wrapper<T> {\n  unwrap(): T;\n}\n\n/** Reverse direction wrapper from Exp --wrapped--> Compat */\nexport interface ReverseWrapper<T> {\n  wrapped(): T;\n}\n\nexport function unwrap<T>(object: unknown): T {\n  return (object as Wrapper<T>).unwrap();\n}\n\nexport function wrapped<T>(object: unknown): T {\n  return (object as ReverseWrapper<T>).wrapped();\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as exp from '@firebase/auth/internal';\nimport * as compat from '@firebase/auth-types';\nimport { FirebaseError } from '@firebase/util';\nimport { Auth } from './auth';\nimport { User } from './user';\nimport { unwrap, wrapped } from './wrap';\n\nfunction credentialFromResponse(\n  userCredential: exp.UserCredentialInternal\n): exp.AuthCredential | null {\n  return credentialFromObject(userCredential);\n}\n\nfunction attachExtraErrorFields(auth: exp.Auth, e: FirebaseError): void {\n  // The response contains all fields from the server which may or may not\n  // actually match the underlying type\n  const response = (e.customData as exp.TaggedWithTokenResponse | undefined)\n    ?._tokenResponse as unknown as Record<string, string>;\n  if ((e as FirebaseError)?.code === 'auth/multi-factor-auth-required') {\n    const mfaErr = e as compat.MultiFactorError;\n    mfaErr.resolver = new MultiFactorResolver(\n      auth,\n      exp.getMultiFactorResolver(auth, e as exp.MultiFactorError)\n    );\n  } else if (response) {\n    const credential = credentialFromObject(e);\n    const credErr = e as compat.AuthError;\n    if (credential) {\n      credErr.credential = credential;\n      credErr.tenantId = response.tenantId || undefined;\n      credErr.email = response.email || undefined;\n      credErr.phoneNumber = response.phoneNumber || undefined;\n    }\n  }\n}\n\nfunction credentialFromObject(\n  object: FirebaseError | exp.UserCredential\n): exp.AuthCredential | null {\n  const { _tokenResponse } = (\n    object instanceof FirebaseError ? object.customData : object\n  ) as exp.TaggedWithTokenResponse;\n  if (!_tokenResponse) {\n    return null;\n  }\n\n  // Handle phone Auth credential responses, as they have a different format\n  // from other backend responses (i.e. no providerId). This is also only the\n  // case for user credentials (does not work for errors).\n  if (!(object instanceof FirebaseError)) {\n    if ('temporaryProof' in _tokenResponse && 'phoneNumber' in _tokenResponse) {\n      return exp.PhoneAuthProvider.credentialFromResult(object);\n    }\n  }\n\n  const providerId = _tokenResponse.providerId;\n\n  // Email and password is not supported as there is no situation where the\n  // server would return the password to the client.\n  if (!providerId || providerId === exp.ProviderId.PASSWORD) {\n    return null;\n  }\n\n  let provider: Pick<\n    typeof exp.OAuthProvider,\n    'credentialFromResult' | 'credentialFromError'\n  >;\n  switch (providerId) {\n    case exp.ProviderId.GOOGLE:\n      provider = exp.GoogleAuthProvider;\n      break;\n    case exp.ProviderId.FACEBOOK:\n      provider = exp.FacebookAuthProvider;\n      break;\n    case exp.ProviderId.GITHUB:\n      provider = exp.GithubAuthProvider;\n      break;\n    case exp.ProviderId.TWITTER:\n      provider = exp.TwitterAuthProvider;\n      break;\n    default:\n      const {\n        oauthIdToken,\n        oauthAccessToken,\n        oauthTokenSecret,\n        pendingToken,\n        nonce\n      } = _tokenResponse as exp.SignInWithIdpResponse;\n      if (\n        !oauthAccessToken &&\n        !oauthTokenSecret &&\n        !oauthIdToken &&\n        !pendingToken\n      ) {\n        return null;\n      }\n      // TODO(avolkovi): uncomment this and get it working with SAML & OIDC\n      if (pendingToken) {\n        if (providerId.startsWith('saml.')) {\n          return exp.SAMLAuthCredential._create(providerId, pendingToken);\n        } else {\n          // OIDC and non-default providers excluding Twitter.\n          return exp.OAuthCredential._fromParams({\n            providerId,\n            signInMethod: providerId,\n            pendingToken,\n            idToken: oauthIdToken,\n            accessToken: oauthAccessToken\n          });\n        }\n      }\n      return new exp.OAuthProvider(providerId).credential({\n        idToken: oauthIdToken,\n        accessToken: oauthAccessToken,\n        rawNonce: nonce\n      });\n  }\n\n  return object instanceof FirebaseError\n    ? provider.credentialFromError(object)\n    : provider.credentialFromResult(object);\n}\n\nexport function convertCredential(\n  auth: exp.Auth,\n  credentialPromise: Promise<exp.UserCredential>\n): Promise<compat.UserCredential> {\n  return credentialPromise\n    .catch(e => {\n      if (e instanceof FirebaseError) {\n        attachExtraErrorFields(auth, e);\n      }\n      throw e;\n    })\n    .then(credential => {\n      const operationType = credential.operationType;\n      const user = credential.user;\n\n      return {\n        operationType,\n        credential: credentialFromResponse(\n          credential as exp.UserCredentialInternal\n        ),\n        additionalUserInfo: exp.getAdditionalUserInfo(\n          credential as exp.UserCredential\n        ),\n        user: User.getOrCreate(user)\n      };\n    });\n}\n\nexport async function convertConfirmationResult(\n  auth: exp.Auth,\n  confirmationResultPromise: Promise<exp.ConfirmationResult>\n): Promise<compat.ConfirmationResult> {\n  const confirmationResultExp = await confirmationResultPromise;\n  return {\n    verificationId: confirmationResultExp.verificationId,\n    confirm: (verificationCode: string) =>\n      convertCredential(auth, confirmationResultExp.confirm(verificationCode))\n  };\n}\n\nclass MultiFactorResolver implements compat.MultiFactorResolver {\n  readonly auth: Auth;\n  constructor(\n    auth: exp.Auth,\n    private readonly resolver: exp.MultiFactorResolver\n  ) {\n    this.auth = wrapped(auth);\n  }\n\n  get session(): compat.MultiFactorSession {\n    return this.resolver.session;\n  }\n\n  get hints(): compat.MultiFactorInfo[] {\n    return this.resolver.hints;\n  }\n\n  resolveSignIn(\n    assertion: compat.MultiFactorAssertion\n  ): Promise<compat.UserCredential> {\n    return convertCredential(\n      unwrap(this.auth),\n      this.resolver.resolveSignIn(assertion as exp.MultiFactorAssertion)\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as exp from '@firebase/auth/internal';\nimport * as compat from '@firebase/auth-types';\nimport { Compat } from '@firebase/util';\nimport { _savePersistenceForRedirect } from './persistence';\nimport { CompatPopupRedirectResolver } from './popup_redirect';\nimport {\n  convertConfirmationResult,\n  convertCredential\n} from './user_credential';\n\nexport class User implements compat.User, Compat<exp.User> {\n  // Maintain a map so that there's always a 1:1 mapping between new User and\n  // legacy compat users\n  private static readonly USER_MAP = new WeakMap<exp.User, User>();\n\n  readonly multiFactor: compat.MultiFactorUser;\n\n  private constructor(readonly _delegate: exp.User) {\n    this.multiFactor = exp.multiFactor(_delegate);\n  }\n\n  static getOrCreate(user: exp.User): User {\n    if (!User.USER_MAP.has(user)) {\n      User.USER_MAP.set(user, new User(user));\n    }\n\n    return User.USER_MAP.get(user)!;\n  }\n\n  delete(): Promise<void> {\n    return this._delegate.delete();\n  }\n  reload(): Promise<void> {\n    return this._delegate.reload();\n  }\n  toJSON(): object {\n    return this._delegate.toJSON();\n  }\n  getIdTokenResult(forceRefresh?: boolean): Promise<compat.IdTokenResult> {\n    return this._delegate.getIdTokenResult(forceRefresh);\n  }\n  getIdToken(forceRefresh?: boolean): Promise<string> {\n    return this._delegate.getIdToken(forceRefresh);\n  }\n  linkAndRetrieveDataWithCredential(\n    credential: compat.AuthCredential\n  ): Promise<compat.UserCredential> {\n    return this.linkWithCredential(credential);\n  }\n  async linkWithCredential(\n    credential: compat.AuthCredential\n  ): Promise<compat.UserCredential> {\n    return convertCredential(\n      this.auth,\n      exp.linkWithCredential(this._delegate, credential as exp.AuthCredential)\n    );\n  }\n  async linkWithPhoneNumber(\n    phoneNumber: string,\n    applicationVerifier: compat.ApplicationVerifier\n  ): Promise<compat.ConfirmationResult> {\n    return convertConfirmationResult(\n      this.auth,\n      exp.linkWithPhoneNumber(this._delegate, phoneNumber, applicationVerifier)\n    );\n  }\n  async linkWithPopup(\n    provider: compat.AuthProvider\n  ): Promise<compat.UserCredential> {\n    return convertCredential(\n      this.auth,\n      exp.linkWithPopup(\n        this._delegate,\n        provider as exp.AuthProvider,\n        CompatPopupRedirectResolver\n      )\n    );\n  }\n  async linkWithRedirect(provider: compat.AuthProvider): Promise<void> {\n    await _savePersistenceForRedirect(exp._castAuth(this.auth));\n    return exp.linkWithRedirect(\n      this._delegate,\n      provider as exp.AuthProvider,\n      CompatPopupRedirectResolver\n    );\n  }\n  reauthenticateAndRetrieveDataWithCredential(\n    credential: compat.AuthCredential\n  ): Promise<compat.UserCredential> {\n    return this.reauthenticateWithCredential(credential);\n  }\n  async reauthenticateWithCredential(\n    credential: compat.AuthCredential\n  ): Promise<compat.UserCredential> {\n    return convertCredential(\n      this.auth as unknown as exp.Auth,\n      exp.reauthenticateWithCredential(\n        this._delegate,\n        credential as exp.AuthCredential\n      )\n    );\n  }\n  reauthenticateWithPhoneNumber(\n    phoneNumber: string,\n    applicationVerifier: compat.ApplicationVerifier\n  ): Promise<compat.ConfirmationResult> {\n    return convertConfirmationResult(\n      this.auth,\n      exp.reauthenticateWithPhoneNumber(\n        this._delegate,\n        phoneNumber,\n        applicationVerifier\n      )\n    );\n  }\n  reauthenticateWithPopup(\n    provider: compat.AuthProvider\n  ): Promise<compat.UserCredential> {\n    return convertCredential(\n      this.auth,\n      exp.reauthenticateWithPopup(\n        this._delegate,\n        provider as exp.AuthProvider,\n        CompatPopupRedirectResolver\n      )\n    );\n  }\n  async reauthenticateWithRedirect(\n    provider: compat.AuthProvider\n  ): Promise<void> {\n    await _savePersistenceForRedirect(exp._castAuth(this.auth));\n    return exp.reauthenticateWithRedirect(\n      this._delegate,\n      provider as exp.AuthProvider,\n      CompatPopupRedirectResolver\n    );\n  }\n  sendEmailVerification(\n    actionCodeSettings?: compat.ActionCodeSettings | null\n  ): Promise<void> {\n    return exp.sendEmailVerification(this._delegate, actionCodeSettings);\n  }\n  async unlink(providerId: string): Promise<compat.User> {\n    await exp.unlink(this._delegate, providerId);\n    return this;\n  }\n  updateEmail(newEmail: string): Promise<void> {\n    return exp.updateEmail(this._delegate, newEmail);\n  }\n  updatePassword(newPassword: string): Promise<void> {\n    return exp.updatePassword(this._delegate, newPassword);\n  }\n  updatePhoneNumber(phoneCredential: compat.AuthCredential): Promise<void> {\n    return exp.updatePhoneNumber(\n      this._delegate,\n      phoneCredential as exp.PhoneAuthCredential\n    );\n  }\n  updateProfile(profile: {\n    displayName?: string | null;\n    photoURL?: string | null;\n  }): Promise<void> {\n    return exp.updateProfile(this._delegate, profile);\n  }\n  verifyBeforeUpdateEmail(\n    newEmail: string,\n    actionCodeSettings?: compat.ActionCodeSettings | null\n  ): Promise<void> {\n    return exp.verifyBeforeUpdateEmail(\n      this._delegate,\n      newEmail,\n      actionCodeSettings\n    );\n  }\n  get emailVerified(): boolean {\n    return this._delegate.emailVerified;\n  }\n  get isAnonymous(): boolean {\n    return this._delegate.isAnonymous;\n  }\n  get metadata(): compat.UserMetadata {\n    return this._delegate.metadata;\n  }\n  get phoneNumber(): string | null {\n    return this._delegate.phoneNumber;\n  }\n  get providerData(): Array<compat.UserInfo | null> {\n    return this._delegate.providerData;\n  }\n  get refreshToken(): string {\n    return this._delegate.refreshToken;\n  }\n  get tenantId(): string | null {\n    return this._delegate.tenantId;\n  }\n  get displayName(): string | null {\n    return this._delegate.displayName;\n  }\n  get email(): string | null {\n    return this._delegate.email;\n  }\n  get photoURL(): string | null {\n    return this._delegate.photoURL;\n  }\n  get providerId(): string {\n    return this._delegate.providerId;\n  }\n  get uid(): string {\n    return this._delegate.uid;\n  }\n  private get auth(): exp.Auth {\n    return (this._delegate as exp.UserImpl).auth as unknown as exp.Auth;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp, _FirebaseService } from '@firebase/app-compat';\nimport * as exp from '@firebase/auth/internal';\nimport * as compat from '@firebase/auth-types';\nimport { Provider } from '@firebase/component';\nimport { ErrorFn, Observer, Unsubscribe } from '@firebase/util';\n\nimport {\n  _validatePersistenceArgument,\n  Persistence,\n  _getPersistencesFromRedirect,\n  _savePersistenceForRedirect\n} from './persistence';\nimport { _isPopupRedirectSupported } from './platform';\nimport { CompatPopupRedirectResolver } from './popup_redirect';\nimport { User } from './user';\nimport {\n  convertConfirmationResult,\n  convertCredential\n} from './user_credential';\nimport { ReverseWrapper, Wrapper } from './wrap';\n\nconst _assert: typeof exp._assert = exp._assert;\n\nexport class Auth\n  implements compat.FirebaseAuth, Wrapper<exp.Auth>, _FirebaseService\n{\n  static Persistence = Persistence;\n  readonly _delegate: exp.AuthImpl;\n\n  constructor(readonly app: FirebaseApp, provider: Provider<'auth'>) {\n    if (provider.isInitialized()) {\n      this._delegate = provider.getImmediate() as exp.AuthImpl;\n      this.linkUnderlyingAuth();\n      return;\n    }\n\n    const { apiKey } = app.options;\n    // TODO: platform needs to be determined using heuristics\n    _assert(apiKey, exp.AuthErrorCode.INVALID_API_KEY, {\n      appName: app.name\n    });\n\n    // TODO: platform needs to be determined using heuristics\n    _assert(apiKey, exp.AuthErrorCode.INVALID_API_KEY, {\n      appName: app.name\n    });\n\n    // Only use a popup/redirect resolver in browser environments\n    const resolver =\n      typeof window !== 'undefined' ? CompatPopupRedirectResolver : undefined;\n    this._delegate = provider.initialize({\n      options: {\n        persistence: buildPersistenceHierarchy(apiKey, app.name),\n        popupRedirectResolver: resolver\n      }\n    }) as exp.AuthImpl;\n\n    this._delegate._updateErrorMap(exp.debugErrorMap);\n    this.linkUnderlyingAuth();\n  }\n\n  get emulatorConfig(): compat.EmulatorConfig | null {\n    return this._delegate.emulatorConfig;\n  }\n\n  get currentUser(): compat.User | null {\n    if (!this._delegate.currentUser) {\n      return null;\n    }\n\n    return User.getOrCreate(this._delegate.currentUser);\n  }\n  get languageCode(): string | null {\n    return this._delegate.languageCode;\n  }\n  set languageCode(languageCode: string | null) {\n    this._delegate.languageCode = languageCode;\n  }\n  get settings(): compat.AuthSettings {\n    return this._delegate.settings;\n  }\n  get tenantId(): string | null {\n    return this._delegate.tenantId;\n  }\n  set tenantId(tid: string | null) {\n    this._delegate.tenantId = tid;\n  }\n  useDeviceLanguage(): void {\n    this._delegate.useDeviceLanguage();\n  }\n  signOut(): Promise<void> {\n    return this._delegate.signOut();\n  }\n  useEmulator(url: string, options?: { disableWarnings: boolean }): void {\n    exp.connectAuthEmulator(this._delegate, url, options);\n  }\n  applyActionCode(code: string): Promise<void> {\n    return exp.applyActionCode(this._delegate, code);\n  }\n\n  checkActionCode(code: string): Promise<compat.ActionCodeInfo> {\n    return exp.checkActionCode(this._delegate, code);\n  }\n\n  confirmPasswordReset(code: string, newPassword: string): Promise<void> {\n    return exp.confirmPasswordReset(this._delegate, code, newPassword);\n  }\n\n  async createUserWithEmailAndPassword(\n    email: string,\n    password: string\n  ): Promise<compat.UserCredential> {\n    return convertCredential(\n      this._delegate,\n      exp.createUserWithEmailAndPassword(this._delegate, email, password)\n    );\n  }\n  fetchProvidersForEmail(email: string): Promise<string[]> {\n    return this.fetchSignInMethodsForEmail(email);\n  }\n  fetchSignInMethodsForEmail(email: string): Promise<string[]> {\n    return exp.fetchSignInMethodsForEmail(this._delegate, email);\n  }\n  isSignInWithEmailLink(emailLink: string): boolean {\n    return exp.isSignInWithEmailLink(this._delegate, emailLink);\n  }\n  async getRedirectResult(): Promise<compat.UserCredential> {\n    _assert(\n      _isPopupRedirectSupported(),\n      this._delegate,\n      exp.AuthErrorCode.OPERATION_NOT_SUPPORTED\n    );\n    const credential = await exp.getRedirectResult(\n      this._delegate,\n      CompatPopupRedirectResolver\n    );\n    if (!credential) {\n      return {\n        credential: null,\n        user: null\n      };\n    }\n    return convertCredential(this._delegate, Promise.resolve(credential));\n  }\n\n  // This function should only be called by frameworks (e.g. FirebaseUI-web) to log their usage.\n  // It is not intended for direct use by developer apps. NO jsdoc here to intentionally leave it\n  // out of autogenerated documentation pages to reduce accidental misuse.\n  addFrameworkForLogging(framework: string): void {\n    exp.addFrameworkForLogging(this._delegate, framework);\n  }\n\n  onAuthStateChanged(\n    nextOrObserver: Observer<unknown> | ((a: compat.User | null) => unknown),\n    errorFn?: (error: compat.Error) => unknown,\n    completed?: Unsubscribe\n  ): Unsubscribe {\n    const { next, error, complete } = wrapObservers(\n      nextOrObserver,\n      errorFn,\n      completed\n    );\n    return this._delegate.onAuthStateChanged(next!, error, complete);\n  }\n  onIdTokenChanged(\n    nextOrObserver: Observer<unknown> | ((a: compat.User | null) => unknown),\n    errorFn?: (error: compat.Error) => unknown,\n    completed?: Unsubscribe\n  ): Unsubscribe {\n    const { next, error, complete } = wrapObservers(\n      nextOrObserver,\n      errorFn,\n      completed\n    );\n    return this._delegate.onIdTokenChanged(next!, error, complete);\n  }\n  sendSignInLinkToEmail(\n    email: string,\n    actionCodeSettings: compat.ActionCodeSettings\n  ): Promise<void> {\n    return exp.sendSignInLinkToEmail(this._delegate, email, actionCodeSettings);\n  }\n  sendPasswordResetEmail(\n    email: string,\n    actionCodeSettings?: compat.ActionCodeSettings | null\n  ): Promise<void> {\n    return exp.sendPasswordResetEmail(\n      this._delegate,\n      email,\n      actionCodeSettings || undefined\n    );\n  }\n  async setPersistence(persistence: string): Promise<void> {\n    _validatePersistenceArgument(this._delegate, persistence);\n    let converted;\n    switch (persistence) {\n      case Persistence.SESSION:\n        converted = exp.browserSessionPersistence;\n        break;\n      case Persistence.LOCAL:\n        // Not using isIndexedDBAvailable() since it only checks if indexedDB is defined.\n        const isIndexedDBFullySupported = await exp\n          ._getInstance<exp.PersistenceInternal>(exp.indexedDBLocalPersistence)\n          ._isAvailable();\n        converted = isIndexedDBFullySupported\n          ? exp.indexedDBLocalPersistence\n          : exp.browserLocalPersistence;\n        break;\n      case Persistence.NONE:\n        converted = exp.inMemoryPersistence;\n        break;\n      default:\n        return exp._fail(exp.AuthErrorCode.ARGUMENT_ERROR, {\n          appName: this._delegate.name\n        });\n    }\n\n    return this._delegate.setPersistence(converted);\n  }\n\n  signInAndRetrieveDataWithCredential(\n    credential: compat.AuthCredential\n  ): Promise<compat.UserCredential> {\n    return this.signInWithCredential(credential);\n  }\n  signInAnonymously(): Promise<compat.UserCredential> {\n    return convertCredential(\n      this._delegate,\n      exp.signInAnonymously(this._delegate)\n    );\n  }\n  signInWithCredential(\n    credential: compat.AuthCredential\n  ): Promise<compat.UserCredential> {\n    return convertCredential(\n      this._delegate,\n      exp.signInWithCredential(this._delegate, credential as exp.AuthCredential)\n    );\n  }\n  signInWithCustomToken(token: string): Promise<compat.UserCredential> {\n    return convertCredential(\n      this._delegate,\n      exp.signInWithCustomToken(this._delegate, token)\n    );\n  }\n  signInWithEmailAndPassword(\n    email: string,\n    password: string\n  ): Promise<compat.UserCredential> {\n    return convertCredential(\n      this._delegate,\n      exp.signInWithEmailAndPassword(this._delegate, email, password)\n    );\n  }\n  signInWithEmailLink(\n    email: string,\n    emailLink?: string\n  ): Promise<compat.UserCredential> {\n    return convertCredential(\n      this._delegate,\n      exp.signInWithEmailLink(this._delegate, email, emailLink)\n    );\n  }\n  signInWithPhoneNumber(\n    phoneNumber: string,\n    applicationVerifier: compat.ApplicationVerifier\n  ): Promise<compat.ConfirmationResult> {\n    return convertConfirmationResult(\n      this._delegate,\n      exp.signInWithPhoneNumber(\n        this._delegate,\n        phoneNumber,\n        applicationVerifier\n      )\n    );\n  }\n  async signInWithPopup(\n    provider: compat.AuthProvider\n  ): Promise<compat.UserCredential> {\n    _assert(\n      _isPopupRedirectSupported(),\n      this._delegate,\n      exp.AuthErrorCode.OPERATION_NOT_SUPPORTED\n    );\n    return convertCredential(\n      this._delegate,\n      exp.signInWithPopup(\n        this._delegate,\n        provider as exp.AuthProvider,\n        CompatPopupRedirectResolver\n      )\n    );\n  }\n  async signInWithRedirect(provider: compat.AuthProvider): Promise<void> {\n    _assert(\n      _isPopupRedirectSupported(),\n      this._delegate,\n      exp.AuthErrorCode.OPERATION_NOT_SUPPORTED\n    );\n\n    await _savePersistenceForRedirect(this._delegate);\n    return exp.signInWithRedirect(\n      this._delegate,\n      provider as exp.AuthProvider,\n      CompatPopupRedirectResolver\n    );\n  }\n  updateCurrentUser(user: compat.User | null): Promise<void> {\n    // remove ts-ignore once overloads are defined for exp functions to accept compat objects\n    // @ts-ignore\n    return this._delegate.updateCurrentUser(user);\n  }\n  verifyPasswordResetCode(code: string): Promise<string> {\n    return exp.verifyPasswordResetCode(this._delegate, code);\n  }\n  unwrap(): exp.Auth {\n    return this._delegate;\n  }\n  _delete(): Promise<void> {\n    return this._delegate._delete();\n  }\n  private linkUnderlyingAuth(): void {\n    (this._delegate as unknown as ReverseWrapper<Auth>).wrapped = () => this;\n  }\n}\n\nfunction wrapObservers(\n  nextOrObserver: Observer<unknown> | ((a: compat.User | null) => unknown),\n  error?: (error: compat.Error) => unknown,\n  complete?: Unsubscribe\n): Partial<Observer<exp.User | null>> {\n  let next = nextOrObserver;\n  if (typeof nextOrObserver !== 'function') {\n    ({ next, error, complete } = nextOrObserver);\n  }\n\n  // We know 'next' is now a function\n  const oldNext = next as (a: compat.User | null) => unknown;\n\n  const newNext = (user: exp.User | null): unknown =>\n    oldNext(user && User.getOrCreate(user as exp.User));\n  return {\n    next: newNext,\n    error: error as ErrorFn,\n    complete\n  };\n}\n\nfunction buildPersistenceHierarchy(\n  apiKey: string,\n  appName: string\n): exp.Persistence[] {\n  // Note this is slightly different behavior: in this case, the stored\n  // persistence is checked *first* rather than last. This is because we want\n  // to prefer stored persistence type in the hierarchy. This is an empty\n  // array if window is not available or there is no pending redirect\n  const persistences = _getPersistencesFromRedirect(apiKey, appName);\n\n  // If \"self\" is available, add indexedDB\n  if (\n    typeof self !== 'undefined' &&\n    !persistences.includes(exp.indexedDBLocalPersistence)\n  ) {\n    persistences.push(exp.indexedDBLocalPersistence);\n  }\n\n  // If \"window\" is available, add HTML Storage persistences\n  if (typeof window !== 'undefined') {\n    for (const persistence of [\n      exp.browserLocalPersistence,\n      exp.browserSessionPersistence\n    ]) {\n      if (!persistences.includes(persistence)) {\n        persistences.push(persistence);\n      }\n    }\n  }\n\n  // Add in-memory as a final fallback\n  if (!persistences.includes(exp.inMemoryPersistence)) {\n    persistences.push(exp.inMemoryPersistence);\n  }\n\n  return persistences;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as exp from '@firebase/auth/internal';\nimport * as compat from '@firebase/auth-types';\nimport firebase from '@firebase/app-compat';\nimport { Compat } from '@firebase/util';\nimport { unwrap } from './wrap';\n\nexport class PhoneAuthProvider\n  implements compat.PhoneAuthProvider, Compat<exp.PhoneAuthProvider>\n{\n  providerId = 'phone';\n  readonly _delegate: exp.PhoneAuthProvider;\n\n  static PHONE_SIGN_IN_METHOD = exp.PhoneAuthProvider.PHONE_SIGN_IN_METHOD;\n  static PROVIDER_ID = exp.PhoneAuthProvider.PROVIDER_ID;\n\n  static credential(\n    verificationId: string,\n    verificationCode: string\n  ): compat.AuthCredential {\n    return exp.PhoneAuthProvider.credential(verificationId, verificationCode);\n  }\n\n  constructor() {\n    // TODO: remove ts-ignore when moving types from auth-types to auth-compat\n    // @ts-ignore\n    this._delegate = new exp.PhoneAuthProvider(unwrap(firebase.auth!()));\n  }\n\n  verifyPhoneNumber(\n    phoneInfoOptions:\n      | string\n      | compat.PhoneSingleFactorInfoOptions\n      | compat.PhoneMultiFactorEnrollInfoOptions\n      | compat.PhoneMultiFactorSignInInfoOptions,\n    applicationVerifier: compat.ApplicationVerifier\n  ): Promise<string> {\n    return this._delegate.verifyPhoneNumber(\n      // The implementation matches but the types are subtly incompatible\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      phoneInfoOptions as any,\n      applicationVerifier\n    );\n  }\n\n  unwrap(): exp.PhoneAuthProvider {\n    return this._delegate;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport firebase, { FirebaseApp } from '@firebase/app-compat';\nimport * as exp from '@firebase/auth/internal';\nimport * as compat from '@firebase/auth-types';\nimport { Compat } from '@firebase/util';\n\nconst _assert: typeof exp._assert = exp._assert;\n\nexport class RecaptchaVerifier\n  implements compat.RecaptchaVerifier, Compat<exp.ApplicationVerifier>\n{\n  readonly _delegate: exp.RecaptchaVerifier;\n  type: string;\n  constructor(\n    container: HTMLElement | string,\n    parameters?: object | null,\n    app: FirebaseApp = firebase.app()\n  ) {\n    // API key is required for web client RPC calls.\n    _assert(app.options?.apiKey, exp.AuthErrorCode.INVALID_API_KEY, {\n      appName: app.name\n    });\n    this._delegate = new exp.RecaptchaVerifier(\n      container,\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      parameters as any,\n\n      // TODO: remove ts-ignore when moving types from auth-types to auth-compat\n      // @ts-ignore\n      app.auth!()\n    );\n    this.type = this._delegate.type;\n  }\n  clear(): void {\n    this._delegate.clear();\n  }\n  render(): Promise<number> {\n    return this._delegate.render();\n  }\n  verify(): Promise<string> {\n    return this._delegate.verify();\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* eslint-disable camelcase */\n\nimport firebase, { _FirebaseNamespace } from '@firebase/app-compat';\nimport * as impl from '@firebase/auth/internal';\nimport {\n  Component,\n  ComponentType,\n  InstantiationMode\n} from '@firebase/component';\nimport { FirebaseError } from '@firebase/util';\n\nimport * as types from '@firebase/auth-types';\nimport { name, version } from './package.json';\nimport { Auth } from './src/auth';\nimport { PhoneAuthProvider as CompatAuthProvider } from './src/phone_auth_provider';\nimport { RecaptchaVerifier as CompatRecaptchaVerifier } from './src/recaptcha_verifier';\n\nconst AUTH_TYPE = 'auth-compat';\n\ndeclare module '@firebase/component' {\n  interface NameServiceMapping {\n    'auth-compat': types.FirebaseAuth;\n  }\n}\n\ndeclare module '@firebase/app-compat' {\n  interface FirebaseNamespace {\n    auth: {\n      (app?: FirebaseApp): types.FirebaseAuth;\n      Auth: typeof types.FirebaseAuth;\n      EmailAuthProvider: typeof types.EmailAuthProvider;\n      EmailAuthProvider_Instance: typeof types.EmailAuthProvider_Instance;\n      FacebookAuthProvider: typeof types.FacebookAuthProvider;\n      FacebookAuthProvider_Instance: typeof types.FacebookAuthProvider_Instance;\n      GithubAuthProvider: typeof types.GithubAuthProvider;\n      GithubAuthProvider_Instance: typeof types.GithubAuthProvider_Instance;\n      GoogleAuthProvider: typeof types.GoogleAuthProvider;\n      GoogleAuthProvider_Instance: typeof types.GoogleAuthProvider_Instance;\n      OAuthProvider: typeof types.OAuthProvider;\n      SAMLAuthProvider: typeof types.SAMLAuthProvider;\n      PhoneAuthProvider: typeof types.PhoneAuthProvider;\n      PhoneAuthProvider_Instance: typeof types.PhoneAuthProvider_Instance;\n      PhoneMultiFactorGenerator: typeof types.PhoneMultiFactorGenerator;\n      RecaptchaVerifier: typeof types.RecaptchaVerifier;\n      RecaptchaVerifier_Instance: typeof types.RecaptchaVerifier_Instance;\n      TwitterAuthProvider: typeof types.TwitterAuthProvider;\n      TwitterAuthProvider_Instance: typeof types.TwitterAuthProvider_Instance;\n    };\n  }\n  interface FirebaseApp {\n    auth?(): types.FirebaseAuth;\n  }\n}\n\n// Create auth components to register with firebase.\n// Provides Auth public APIs.\nfunction registerAuthCompat(instance: _FirebaseNamespace): void {\n  instance.INTERNAL.registerComponent(\n    new Component(\n      AUTH_TYPE,\n      container => {\n        // getImmediate for FirebaseApp will always succeed\n        const app = container.getProvider('app-compat').getImmediate();\n        const authProvider = container.getProvider('auth');\n        return new Auth(app, authProvider);\n      },\n      ComponentType.PUBLIC\n    )\n      .setServiceProps({\n        ActionCodeInfo: {\n          Operation: {\n            EMAIL_SIGNIN: impl.ActionCodeOperation.EMAIL_SIGNIN,\n            PASSWORD_RESET: impl.ActionCodeOperation.PASSWORD_RESET,\n            RECOVER_EMAIL: impl.ActionCodeOperation.RECOVER_EMAIL,\n            REVERT_SECOND_FACTOR_ADDITION:\n              impl.ActionCodeOperation.REVERT_SECOND_FACTOR_ADDITION,\n            VERIFY_AND_CHANGE_EMAIL:\n              impl.ActionCodeOperation.VERIFY_AND_CHANGE_EMAIL,\n            VERIFY_EMAIL: impl.ActionCodeOperation.VERIFY_EMAIL\n          }\n        },\n        EmailAuthProvider: impl.EmailAuthProvider,\n        FacebookAuthProvider: impl.FacebookAuthProvider,\n        GithubAuthProvider: impl.GithubAuthProvider,\n        GoogleAuthProvider: impl.GoogleAuthProvider,\n        OAuthProvider: impl.OAuthProvider,\n        SAMLAuthProvider: impl.SAMLAuthProvider,\n        PhoneAuthProvider: CompatAuthProvider,\n        PhoneMultiFactorGenerator: impl.PhoneMultiFactorGenerator,\n        RecaptchaVerifier: CompatRecaptchaVerifier,\n        TwitterAuthProvider: impl.TwitterAuthProvider,\n        Auth,\n        AuthCredential: impl.AuthCredential,\n        Error: FirebaseError\n      })\n      .setInstantiationMode(InstantiationMode.LAZY)\n      .setMultipleInstances(false)\n  );\n\n  instance.registerVersion(name, version);\n}\n\nregisterAuthCompat(firebase as _FirebaseNamespace);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}